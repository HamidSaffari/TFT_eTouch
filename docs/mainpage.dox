/**
@brief Documentation file for TFT_eTouch
@author Achill Hasler
@file mainpage.dox
*/

// we have to list all sample programs to show these in doxygen
/**
@example raw.ino Touch raw data example
@example edit_calibation.ino Calibration example for TFT_eSPI driver
@example calibrate.ino Calibration example for TFT_eSPI driver (obsolete use edit_calibation.ino)
@example Conways_Life.ino Application example for TFT_eSPI driver (compare TFT_eTouch with integrated Touch in TFT_eSPI)
*/

/**
@mainpage TFT_eTouch
@section intro Intro
Touchscreen
- interface: spi & i2c & analog
- type: resistive & capacitive

This library supports resistive touchscreen chips with spi interface.

@section config Config
@subsection display Supported display
The template parameter must be a Adafuit compatible display driver with followed interface
@code
class T {
public:
  int16_t height(void) const;
  int16_t width(void) const;
  uint8_t getRotation(void) const;
  
  void    fillScreen(uint32_t color);
  void    drawPixel(uint32_t x, uint32_t y, uint32_t color);
  void    drawCircle(int32_t x0, int32_t y0, int32_t r, uint32_t color);
  void    fillCircle(int32_t x0, int32_t y0, int32_t r, uint32_t color);
  void    drawFastVLine(int32_t x, int32_t y, int32_t h, uint32_t color);
  void    drawFastHLine(int32_t x, int32_t y, int32_t w, uint32_t color);

  void    setCursor(int16_t x, int16_t y);
  void    setTextSize(uint8_t size);
  void    setTextColor(uint16_t fgcolor, uint16_t bgcolor);
  void    print(..);    // from Print
  void    println(..);  // from Print

  // when defined BASIC_FONT_SUPPORT follow function may be not avalible
  void    setTextFont(uint8_t font);
  void    drawString(..)
};
@endcode

@subsection chips Supported resistive chips
- ADS7846 https://www.ti.com/lit/ds/symlink/ads7846.pdf
- TSC2046 https://www.ti.com/lit/ds/symlink/tsc2046.pdf
- XPT2064 https://www.buydisplay.com/download/ic/XPT2046.pdf
- ADS7843 https://www.ti.com/lit/ds/symlink/ads7843.pdf
- ADS7845 http://www.ti.com/lit/ds/symlink/ads7845.pdf
- AD7873  https://www.analog.com/media/en/technical-documentation/data-sheets/ad7873.pdf
- AD7843  https://www.analog.com/media/en/technical-documentation/data-sheets/ad7843.pdf

@subsection raw Raw value definition
All measured values (X, Y, Z1, Z2) has 12bit resolution, range is 0 .. 4095, bud valid range is 25 .. 4000.

You can adjust the valid range with TFT_eTouchBase::setValidRawRange().
@subsection time Time for next fetch
You can adjust the time between measures with TFT_eTouchBase::setMeasureWait(). As long the time is not reached, you get the same value from TFT_eTouchBase::getRaw(), TFT_eTouch<T>::getXY() and TFT_eTouch<T>::get().

@subsection algo Fetch algorithm
There are two variants in sbaa036.pdf (Figure 10 and 11 page 8). You can wait til measure is same last measure (Figure 10) or taking the n conversation (Figure 11) or averaging n measures.
When you averaging you can also ignore min and max measure.

You can adjust the algorithm with TFT_eTouchBase::setMeasure() and TFT_eTouchBase::setAveraging().

If this is still noisy you can have a try with FIR filter. When using FIR there is a large delay.

@subsection calibrate Calibrate
There is a document from TI slyt277.pdf whitch describes calibration. In my callibration i use only offset and scaling correction no rotation correction.
You can get a new calibation (TFT_eTouchBase::Calibation) with TFT_eTouch<T>::getCalibration(). A existing calibration can be set with 
TFT_eTouchBase::setCalibration().

@section todo To Do
@subsection read_write_cal calibation persistent
We have to write a function to read/write the calibation from EPROM. (Atmel & Teensy missing) ESP32 & ESP8266 done.
bool TFT_eTouchBase::readCalibration(), bool TFT_eTouchBase::writeCalibration().

@subsection analog analog Touch with X+, X-, Y+, Y-
Support analog Touch.

@subsection gesture gesture recognition
Next will be gesture recognition. stay, wipe left, wipe right, wipe up and wipe down. (with one ore two fingers)
If its possible zoom in / out. (only prepered)

@section reference Reference
@subsection pdf External documentation 
- http://www.ti.com/lit/an/sbaa036/sbaa036.pdf
- http://www.ti.com/lit/an/slyt277/slyt277.pdf

@subsection arduino Existing touch classes for Arduino
- https://github.com/adafruit/Adafruit_STMPE610
- https://github.com/PaulStoffregen/XPT2046_Touchscreen
- https://github.com/adafruit/Touch-Screen-Library (analog Touch)

using:
- https://gist.github.com/CelliesProjects/99a56121e7c8a7cb00d5b46270e74b75

@subsection linux Linux kernel sources
- {linux_scr}/include/linux/spi/ads7846.h
- {linux_scr}/drivers/drivers/input/touchscreen/ads7846.c 

- {linux_scr}/drivers/staging/fbtft

@section history History
- v0.4.0 First draft working with TFT_eSPI < 1.4.0
- v0.5.0 tested with Tennsy 3.1, ESP32 added load save Configuration, added struct interface for raw & tft values, increasing speed when not touched.
@subsection patch 1.4.0 < TFT_eSPI < 1.4.8 (latest TFT_eSPI lib has this patch)
- add static getSPIinstance() function, for getting spi bus used by touchscreen.
- when default config, (VSPI Port) do not create a new var, use the SPI var exported by SPI.h
Header file TFT_eSPI.h
@code
  void     getSetup(setup_t& tft_settings); // Sketch provides the instance to populate
+#ifndef ESP32_PARALLEL
+  static SPIClass& getSPIinstance();
+#endif

  int32_t  cursor_x, cursor_y, padX;
@endcode
Sourcefile TFT_eSPI.cpp
@code
#if defined (ESP32)
  #if !defined (ESP32_PARALLEL)
    #ifdef USE_HSPI_PORT
      SPIClass spi(HSPI);
    #else // use default VSPI port
+-      SPIClass& spi = SPI; // use the predefined SPI variable which is defined by SPI.h
    #endif
  #endif
#else // ESP8266
+-  SPIClass& spi = SPI; // use the predefined SPI variable which is defined by SPI.h
#endif

+#ifndef ESP32_PARALLEL
+SPIClass& TFT_eSPI::getSPIinstance() { return spi; }
+#endif

@endcode

- v0.6.0 tested with Tennsy 3.1, ESP32, ESP8266, Arduino NANO.
- ESP8266 support
- added FIR filter

*/
EOF 
